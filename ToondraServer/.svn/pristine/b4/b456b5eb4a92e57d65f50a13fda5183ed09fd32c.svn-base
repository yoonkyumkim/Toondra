package kr.co.toondra.api.member.service;

import java.util.HashMap;
import java.util.UUID;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import kr.co.toondra.api.bean.Result;
import kr.co.toondra.api.common.util.AESUtils;
import kr.co.toondra.api.member.dao.MemberDao;
import kr.co.toondra.common.exception.LogicException;
import kr.co.toondra.common.util.Base64;
import kr.co.toondra.common.util.CommonUtil;
import kr.co.toondra.common.util.Hash;
import kr.co.toondra.common.util.MailSender;
import kr.co.toondra.common.util.StringUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;


@Service("apiMemberService")
public class MemberService {
	
	
	@Value("${mail.address}")
	private String MAIL_ADDRESS;
	
	
	@Autowired
	private MemberDao dao;
	
	@Autowired
	private MailSender sender;
	
	
	
	public Result insertMember(HashMap<String, Object> param) throws Exception {

		Result result = new Result();
		
		String email = (String)param.get("email");
		String encryptPassword = (String)param.get("password");
		String deviceSeq = (String)param.get("device_seq");
		
		param.put("device_seq", deviceSeq);
		
		String encKey = (String)dao.getEncKey(param);

		byte[] decodedKey = Base64.decode(encKey);
		
		//AES KEY
		SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
		
		String decryptPassword = AESUtils.randomKeyDecrypt(encryptPassword, key);
		
		if(!CommonUtil.isEmail(email) || decryptPassword.length() < 8 || decryptPassword.length() > 15 || deviceSeq.equals("")) {
			throw new LogicException("Does not apply right format", "401");
		}
		
			
		//이메일 중복 확인
		if(dao.getEmailOverlapCheck(param) == 0){

			String certKey = UUID.randomUUID().toString().replace("-", "");
			
			param.put("cert_key", certKey);
			
			param.put("password", Hash.sha512(decryptPassword));

			//회원 가입
			dao.insertMember(param);
			
			
			//Email전송
			sender.sendSmtpGMail((String)param.get("email")
					, "Toondra 회원가입 인증 이메일입니다."
					, "Toondra 회원가입 인증 이메일 입니다<html><head><title>Home</title></head><body><br><a href=\""+MAIL_ADDRESS+"/api/member/confirm?cert_key="+certKey+"\">인증 하기</a>를 클릭해주세요</body></html>");
			
		} else {
			result.setResp_code("405");
			result.setResp_msg("Data duplication");
		}
	
		return result;
	}
	
	
	
	public int updateMemberConfirm(HashMap<String, Object> param) throws Exception {
		
		if(dao.updateMemberConfirm(param) == 0){
			return 0;
		}
		
		return 1;
	}
	
	
	public Result memberLogin(HashMap<String, Object> param) throws Exception {
		
		Result result = new Result();
		
		result.setResp_code("406");
		result.setResp_msg("Unauthorized member");
		
		String email = (String)param.get("email");
		String encryptPassword = (String)param.get("password");
		String deviceSeq = (String)param.get("device_seq");
		
		param.put("device_seq", deviceSeq);
		
		String encKey = (String)dao.getEncKey(param);

		byte[] decodedKey = Base64.decode(encKey);
	
		//AES KEY
		SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
		
		String decryptPassword = AESUtils.randomKeyDecrypt(encryptPassword, key);

		if(!CommonUtil.isEmail(email) || decryptPassword.length() < 8 || decryptPassword.length() > 15) {
			throw new LogicException("Does not apply right format","401");
		}
		
		param.put("password", Hash.sha512(decryptPassword));
		
		
		HashMap<String, Object> memberInfo = dao.getMemberInfo(param);
	
		if(memberInfo == null || ((String)memberInfo.get("member_seq")).equals("") ) {
			throw new LogicException("[Query] not found data {member_seq}","402");
		}
		
		param.put("member_seq", memberInfo.get("member_seq"));
		
		
		//인증 상태 (인증 : Y, 미 인증 : N)
		String certState = (String)memberInfo.get("cert_state");

		
		if(certState.equals("Y")){
			
			String loginKey = UUID.randomUUID().toString().replace("-", "");
			
			
			HashMap<String, Object> deviceInfo = dao.getDeviceInfo(param);
			
			param.put("device_seq", deviceInfo.get("device_seq"));
			param.put("login_key", loginKey);
			
			
			if(dao.loginKeyDuplicationCheck(param) > 0) {
				
				while(dao.loginKeyDuplicationCheck(param) == 0){
					loginKey = UUID.randomUUID().toString().replace("-", "");
					param.put("login_key", loginKey);
				}
			}
			
			
			//기존 로그인 기록이 있으면 update
			if(dao.getMemberLoginCheck(param) > 0) {
				
				dao.updateMemberLogin(param);
				
			} else {
				//기존 로그인 기록이 없으면 insert
				dao.insertMemberLogin(param);
				
			}
			
			result.putObject("email", memberInfo.get("email"));
			result.putObject("push_yn", memberInfo.get("push_yn"));
			result.putObject("login_key", loginKey);
			
			result.setResp_msg("success");
			result.setResp_code("200");
		}
		
		result.putObject("cert_state", certState);
		
		return result;
	}
	
	public Result updateMemberLogout(HashMap<String, Object> param, String loginKey) throws Exception {
		
		Result result = new Result();
		
		dao.updateMemberLogout(loginKey);
		
		
		return result;
	}
	
	
	public Result updateMemberPwChange(HashMap<String, Object> param, String loginKey) throws Exception {

		Result result = new Result();
		
		//현재 비밀번호
		String encNowPassword = (String)param.get("now_password");
		
		//새 비밀번호
		String encNewPassword = (String)param.get("new_password");
		
		String encKey = (String)dao.getEncKeyFromLoginKey(param);
		
		byte[] decodedKey = Base64.decode(encKey);
	
		//AES KEY
		SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
		
		String decNowPassword = AESUtils.randomKeyDecrypt(encNowPassword, key);
		
		String decNewPassword = AESUtils.randomKeyDecrypt(encNewPassword, key);
		
		
		if(decNowPassword.length() < 8 || decNowPassword.length() > 15 || decNewPassword.length() < 8 || decNewPassword.length() > 15) {
			throw new LogicException("Does not apply right format","401");
		}
		
		String memberSeq = dao.getMemberSeq(loginKey);

		if(memberSeq == null || memberSeq.equals("")){
			throw new LogicException("[Query] not found data {member_seq}", "402");
		}
		
		param.put("member_seq", memberSeq);
		
		
		param.put("now_password", Hash.sha512(decNowPassword));
		param.put("new_password", Hash.sha512(decNewPassword));
		
		if(dao.updateMemberPwChange(param) != 1) {
			throw new LogicException("[Query] update fail { password }", "403");
		}
		
		return result;
	}
	
	public Result memberFindPw(HashMap<String, Object> param) throws Exception {
		
		Result result = new Result();
		
		//임시 비밀번호
		String password = new StringUtil().getRandomString(10);

		param.put("password", Hash.sha512(password));
		
		if(dao.updateMemberPw(param) != 1) {
			throw new LogicException("[Query] update fail { password }", "403");
		}
		
		
		//Email전송
		sender.sendSmtpGMail((String)param.get("email")
				, "Toondra 임시 비밀번호입니다."
				, "Toondra 아이디 : " + (String)param.get("email") + "님의 임시 비밀번호 : " + password);
		
		return result;
	}
	
	
	
	public Result memberPush(HashMap<String, Object> param, String loginKey) throws Exception {
		
		String memberSeq = dao.getMemberSeq(loginKey);

		if(memberSeq == null || memberSeq.equals("")){
			throw new LogicException("[Query] not found data { member_seq }", "402");
		}
		
		param.put("member_seq", memberSeq);
		
		Result result = new Result();
		
		param.put("push_yn", ((String)param.get("push_yn")).toUpperCase());
		
		
		if(dao.updatePushState(param) != 1) {
			throw new LogicException("[Query] update fail { push_yn }", "403");
		}
		
		
		return result;
	}
}
